{"version":3,"sources":["webpack:///./docs/pages/docs/pages/play.vue"],"names":[],"mappings":"AA2JA,WACA,8C","file":"e42a350ab82490b58fdc.css","sourcesContent":["<template>\n  <div class=\"container\">\n\n    <div class=\"mb-3 row\">\n      <div class=\"col-md-10\">\n        <span>Here you can interactively play and test components with a fresh vue instance.</span>\n        <br>\n        <Strong>TIP: </Strong>\n        <span>You can clone docs repo, to hack and develop components.</span>\n        <span> changes will be reflected and hot-reloaded instantly.</span>\n        <br>\n        <span>Please refer to</span>\n        <router-link to=\"/docs\"> Docs </router-link>\n        <span>for more info about available tags and usage.</span>\n      </div>\n      <div class=\"col-md-1\">\n        <form\n          method=\"post\"\n          action=\"https://jsfiddle.net/api/post/library/pure/\"\n          target=\"_blank\"\n          v-if=\"vm\">\n          <input\n            type=\"hidden\"\n            :value=\"html_fiddle\"\n            name=\"html\">\n          <input\n            type=\"hidden\"\n            :value=\"js_fiddle\"\n            name=\"js\">\n          <input\n            type=\"hidden\"\n            value=\"l\"\n            name=\"js_wrap\">\n          <input\n            name=\"resources\"\n            type=\"hidden\"\n            :value=\"fiddle_dependencies.join(',')\">\n          <b-btn\n            size=\"sm\"\n            type=\"submit\">\n            <span>Export to JSFiddle</span>\n          </b-btn>\n        </form>\n      </div>\n    </div>\n\n    <transition-group\n      class=\"row\"\n      tag=\"div\"\n      name=\"flip\">\n      <div\n        key=\"A\"\n        :class=\"full?'col-12':'col'\">\n        <transition-group\n          class=\"row\"\n          tag=\"div\"\n          name=\"flip\">\n          <div\n            :class=\"`col-md-${(vertical&&!full)?6:12} col-sm-12`\"\n            key=\"A1\">\n            <!--Template-->\n            <div class=\"card mt-2\">\n              <div class=\"card-header card-outline-info\">\n                <span>Template</span>\n                <b-btn\n                  size=\"sm\"\n                  @click=\"toggleFull\"\n                  variant=\"outline-info\"\n                  class=\"float-right\">\n                  <span>{{ full ? 'Split' : 'Full' }}</span>\n                </b-btn>\n              </div>\n              <codemirror\n                v-model=\"html\"\n                mode=\"htmlmixed\"/>\n            </div>\n          </div>\n          <div\n            :class=\"`col-md-${(vertical&&!full)?6:12} col-sm-12`\"\n            key=\"A2\">\n            <!--JS-->\n            <div class=\"card mt-2\">\n              <div class=\"card-header card-outline-warning\">\n                <span>JS</span>\n                <b-btn\n                  size=\"sm\"\n                  @click=\"toggleFull\"\n                  variant=\"outline-info\"\n                  class=\"float-right\">\n                  <span>{{ full ? 'Split' : 'Full' }}</span>\n                </b-btn>\n              </div>\n              <codemirror\n                v-model=\"js\"\n                mode=\"javascript\"/>\n            </div>\n          </div>\n        </transition-group>\n      </div>\n\n      <div\n        key=\"B\"\n        :class=\"`col-md-${(vertical || full)?12:6} col-sm-12`\">\n        <!--Result-->\n        <div class=\"card mt-2\">\n          <div class=\"card-header card-outline-success\">\n            <span>Result</span>\n            <b-btn\n              size=\"sm\"\n              @click=\"toggleVertical\"\n              variant=\"outline-info\"\n              class=\"float-right\"\n              v-if=\"!full\">\n              <span>{{ vertical ? 'Horizontal' : 'Vertical' }}</span>\n            </b-btn>\n          </div>\n          <div class=\"card-body\">\n            <div\n              id=\"result-container\"\n              ref=\"result\"/>\n          </div>\n        </div>\n\n        <!--Console-->\n        <div class=\"\">\n          <div class=\"card mt-2\">\n            <div class=\"card-header card-outline-secondary\">\n              <span>Console</span>\n              <b-btn\n                size=\"sm\"\n                @click=\"clear\"\n                variant=\"outline-danger\"\n                class=\"float-right\"\n                v-if=\"messages.length\">\n                <span>Clear</span>\n              </b-btn>\n            </div>\n            <div class=\"card-body\">\n              <div\n                v-for=\"(message, idx) in messages\"\n                :key=\"`console-${idx}`\">\n                <b-badge :variant=\"message[0]\">{{ message[0] }}</b-badge>\n                <span class=\"text-muted\"> {{ message[1] }}</span>\n                <br>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </transition-group>\n\n  </div>\n</template>\n\n<style>\n.flip-move {\n    transition: all .3s;\n}\n</style>\n\n<script>\nimport Vue from 'vue'\nimport debounce from 'lodash/debounce'\n\nconst defaultJS = `{\n    data: {\n        name: 'Zeus'\n    },\n}`\nconst defaultHTML = `<b-alert show> Hello {{ name }}! </b-alert>`\n\nexport default {\n  data () {\n    return {\n      html: '',\n      js: '',\n      vm: null,\n      messages: [],\n      originalLog: null,\n      originalWarn: null,\n      originalError: null,\n      vertical: false,\n      full: false,\n      lazy_run_: null\n    }\n  },\n  head () {\n    return {\n      title: 'Playground - BootstrapVue'\n    }\n  },\n  computed: {\n    fiddle_dependencies () {\n      return [\n        '//unpkg.com/bootstrap/dist/css/bootstrap.min.css',\n        '//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css',\n        '//unpkg.com/vue@latest/dist/vue.min.js',\n        '//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js'\n      ]\n    },\n    js_fiddle () {\n      const js = `new Vue({el:'#app',\\r\\n${this.js.trim()}})`.trim()\n      return `window.onload = function() {${js}}`\n    },\n    html_fiddle () {\n      return `<div id='app'>\\r\\n${this.html}\\r\\n</div>`.trim()\n    },\n    lazy_run () {\n      if (!this.lazy_run_) {\n        this.lazy_run_ = debounce(this.run.bind(this), 500)\n      }\n      return this.lazy_run_\n    }\n  },\n  watch: {\n    html () {\n      this.lazy_run()\n    },\n    js () {\n      this.lazy_run()\n    }\n  },\n  mounted () {\n    this.load()\n    this.run()\n\n    if (typeof window !== 'undefined') {\n      this.originalLog = console.log\n      this.originalWarn = console.warn\n      this.originalError = console.error\n      const self = this\n\n      console.warn = function () {\n        self.log('warning', arguments)\n      }\n\n      console.log = function () {\n        self.log('info', arguments)\n      }\n\n      console.error = function () {\n        self.log('danger', arguments)\n      }\n    }\n  },\n  beforeDestroy () {\n    if (typeof window !== 'undefined') {\n      console.log = this.originalLog\n      console.warn = this.originalWarn\n      console.error = this.originalError\n    }\n    this.destroyVM()\n  },\n  methods: {\n    log (tag, args) {\n      // We have to ignore props mutation warning due to vue bug when we have two instances\n      if (String(args[0]).indexOf('Avoid mutating a prop directly') !== -1) {\n        return\n      }\n\n      const argsArr = [tag]\n      for (let i = 0; i < args.length; i++) {\n        argsArr.push(args[i])\n      }\n\n      this.originalLog.apply(console, argsArr)\n\n      if (this.messages.length > 10) {\n        this.messages.splice(10)\n      }\n      this.messages.unshift([argsArr.shift(), argsArr.map(String).join(' ')])\n    },\n    destroyVM () {\n      if (this.vm) {\n        try {\n          this.vm.$destroy()\n        } catch (err) {\n        }\n        this.vm = null\n      }\n    },\n    run () {\n      // Commit latest changes\n      this.commit()\n\n      // Destroy old VM if exists\n      this.destroyVM()\n\n      // Set HTML\n      this.$refs.result.innerHTML = `<div id=\"result\"></div>`\n\n      // Clear messages\n      this.clear()\n\n      // Try Create new VM\n      try {\n        let options\n        try {\n          /* eslint-disable no-eval */\n          let js = this.js.trim()\n          if (js.indexOf('{') !== 0) {\n            js = `{${js}}`\n          }\n          eval(`options= ${js}`)\n        } catch (err) {\n          throw new Error(`Compiling JS: ${err}`)\n        }\n        options.router = this.$router\n        options.el = '#result'\n        options.template = `<div>${this.html}</div>`\n        this.vm = new Vue(options)\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    toggleVertical () {\n      this.vertical = !this.vertical\n    },\n    toggleFull () {\n      this.full = !this.full\n    },\n    clear () {\n      this.messages.splice(0)\n    },\n    load () {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return\n      }\n      this.js = window.localStorage.getItem('playground_js') || defaultJS.trim()\n      this.html = window.localStorage.getItem('playground_html') || defaultHTML.trim()\n    },\n    commit () {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return\n      }\n      window.localStorage.setItem('playground_js', this.js)\n      window.localStorage.setItem('playground_html', this.html)\n    }\n  }\n}\n</script>\n"],"sourceRoot":""}