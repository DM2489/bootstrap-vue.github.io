webpackJsonp([22],{hwfG:function(s,t){s.exports='<h1 id=tooltips>Tooltips</h1> <blockquote> <p>Easily add tooltips to elements or components via the <code>&lt;b-tooltip&gt;</code> component or <a href=/docs/directives/tooltip><code>v-b-tooltip</code></a> directive (preferred method).</p> </blockquote> <pre class=hljs><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;text-center my-3&quot;</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>v-b-tooltip.hover</span> <span class=hljs-attr>title</span>=<span class=hljs-string>&quot;I&apos;m a tooltip!&quot;</span>&gt;</span>Hover Me<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- tooltip-example-1.vue --&gt;</span>\n</pre> <h2 id=overview>Overview</h2> <p>Things to know when using tooltip component:</p> <ul> <li>Tooltips rely on the 3rd party library Popper.js for positioning. The library is bundled with Bootstrap-Vue in the dist files!</li> <li>Tooltips with zero-length titles are never displayed.</li> <li>Triggering tooltips on hidden elements will not work.</li> <li>Specify <code>container</code> as <code>null</code> (default, appends to <code>&lt;body&gt;</code>) to avoid rendering problems in more complex components (like input groups, button groups, etc). You can use container to optionally specify a different element to append the rendered tooltip to.</li> <li>Tooltips for <code>disabled</code> elements must be triggered on a wrapper element.</li> <li>When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use white-space: nowrap; on your <code>&lt;a&gt;</code>s, <code>&lt;b-link&gt;</code>s and <code>&lt;router-link&gt;</code>s to avoid this behavior.</li> <li>Tooltips must be hidden before their corresponding elements have been removed from the DOM.</li> </ul> <p>The <code>&lt;b-tooltip</code> component inserts a hidden (<code>display:none</code>) <code>&lt;div&gt;</code> intermediate container element at the point in the DOM where the <code>&lt;b-tooltip&gt;</code> component is placed. This may affect layout and/or styling of components such as <code>&lt;b-button-group&gt;</code>, <code>&lt;b-button-toolbar&gt;</code>, and <code>&lt;b-input-group&gt;</code>. To avoid these possible layout issues, place the <code>&lt;b-tooltip&gt;</code> component <strong>outside</strong> of these types of components.</p> <p>The target element <strong>must</strong> exist in the document before <code>&lt;b-tooltip&gt;</code> is mounted. If the target element is not found during mount, the tooltip will never open. Always place your <code>&lt;b-tooltip&gt;</code> component lower in the DOM than your target element.</p> <p><strong>Note:</strong> <em>When using the default slot for the title, <code>&lt;b-tooltip&gt;</code> transfers the rendered DOM from that slot into the tooltip&apos;s markup when shown, and returns the content back to the <code>&lt;b-tooltip&gt;</code> component when hidden. This may cause some issues in rare circumstances, so please test your implementation accordingly! The <code>title</code> prop does not have this behavior. For simple tooltips, we recommend using the <code>v-b-tooltip</code> directive and enable the <code>html</code> modifier if needed.</em></p> <h2 id=positioning>Positioning</h2> <p>Twelve options are available for positioning: <code>top</code>, <code>topleft</code>, <code>topright</code>, <code>right</code>, <code>righttop</code>, <code>rightbottom</code>, <code>bottom</code>, <code>bottomleft</code>, <code>bottomright</code>, <code>left</code>, <code>lefttop</code>, and <code>leftbottom</code> aligned. The default position is <code>top</code>. Positioning is relative to the trigger element.</p> <div class="bd-example bd-example-tooltip-static"> <div class="tooltip bs-tooltip-top bs-tooltip-top-docs" role=tooltip> <div class=arrow></div> <div class=tooltip-inner> Tooltip on the top </div> </div> <div class="tooltip bs-tooltip-top bs-tooltip-top-docs" role=tooltip> <div class=arrow style=left:93%></div> <div class=tooltip-inner> Tooltip on the topleft </div> </div> <div class="tooltip bs-tooltip-top bs-tooltip-top-docs" role=tooltip> <div class=arrow style=left:5%></div> <div class=tooltip-inner> Tooltip on the topright </div> </div> <div class="tooltip bs-tooltip-right bs-tooltip-right-docs" role=tooltip> <div class=arrow></div> <div class=tooltip-inner> Tooltip on the right </div> </div> <div class="tooltip bs-tooltip-right bs-tooltip-right-docs" role=tooltip> <div class=arrow style=top:60%></div> <div class=tooltip-inner> Tooltip on the righttop </div> </div> <div class="tooltip bs-tooltip-right bs-tooltip-right-docs" role=tooltip> <div class=arrow style=top:26%></div> <div class=tooltip-inner> Tooltip on the rightbottom </div> </div> <div class="tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role=tooltip> <div class=arrow></div> <div class=tooltip-inner> Tooltip on the bottom </div> </div> <div class="tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role=tooltip> <div class=arrow style=left:93%></div> <div class=tooltip-inner> Tooltip on the bottomleft </div> </div> <div class="tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role=tooltip> <div class=arrow style=left:5%></div> <div class=tooltip-inner> Tooltip on the bottomright </div> </div> <div class="tooltip bs-tooltip-left bs-tooltip-left-docs" role=tooltip> <div class=arrow></div> <div class=tooltip-inner> Tooltip on the left </div> </div> <div class="tooltip bs-tooltip-left bs-tooltip-left-docs" role=tooltip> <div class=arrow style=top:60%></div> <div class=tooltip-inner> Tooltip on the lefttop </div> </div> <div class="tooltip bs-tooltip-left bs-tooltip-left-docs" role=tooltip> <div class=arrow style=top:26%></div> <div class=tooltip-inner> Tooltip on the leftbottom </div> </div> </div> <h2 id=triggers>Triggers</h2> <p>Tooltips can be triggered (opened/closed) via any combination of <code>click</code>, <code>hover</code> and <code>focus</code>. The default trigger is <code>hover focus</code>.</p> <p>If a tooltip has more than one trigger, then all triggers must be cleared before the tooltip will close. I.e. if a tooltip has the trigger <code>focus click</code>, and it was opened by <code>focus</code>, and the user then clicks the trigger element, they must click it again <strong>and</strong> move focus to close the tooltip.</p> <h2 id=-b-tooltip-component-usage><code>&lt;b-tooltip&gt;</code> Component Usage</h2> <pre class=hljs><span class=hljs-tag>&lt;<span class=hljs-name>b-container</span> <span class=hljs-attr>fluid</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-row</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>md</span>=<span class=hljs-string>&quot;6&quot;</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;py-4&quot;</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>id</span>=<span class=hljs-string>&quot;exButton1&quot;</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;outline-success&quot;</span>&gt;</span>Live chat<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>md</span>=<span class=hljs-string>&quot;6&quot;</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;py-4&quot;</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>id</span>=<span class=hljs-string>&quot;exButton2&quot;</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;outline-success&quot;</span>&gt;</span>Html chat<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-row</span>&gt;</span>\n\n  <span class=hljs-comment>&lt;!-- Tooltip title specified via prop title --&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-tooltip</span> <span class=hljs-attr>target</span>=<span class=hljs-string>&quot;exButton1&quot;</span> <span class=hljs-attr>title</span>=<span class=hljs-string>&quot;Online!&quot;</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>b-tooltip</span>&gt;</span>\n\n  <span class=hljs-comment>&lt;!-- HTML title specified via default slot --&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-tooltip</span> <span class=hljs-attr>target</span>=<span class=hljs-string>&quot;exButton2&quot;</span> <span class=hljs-attr>placement</span>=<span class=hljs-string>&quot;bottom&quot;</span>&gt;</span>\n    Hello <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>World!<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-tooltip</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>b-container</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- tooltip-component-1.vue --&gt;</span>\n</pre> <h3 id=component-options>Component Options</h3> <table class="table b-table table-sm table-striped"> <thead class=thead-default> <tr> <th>Prop</th> <th>Default</th> <th>Description</th> <th>Supported values</th> </tr> </thead> <tbody> <tr> <td><code>target</code></td> <td><code>null</code></td> <td>Element String ID, or a reference to an element or component, that you want to trigger the tooltip. <strong>Required</strong></td> <td>Any valid, in-document unique element ID, element reference or component reference</td> </tr> <tr> <td><code>title</code></td> <td><code>null</code></td> <td>Tooltip content (text only, no HTML). if HTML is required, place it in the default slot</td> <td>Plain text</td> </tr> <tr> <td><code>placement</code></td> <td><code>top</code></td> <td>Tooltip position, relative to the trigger element.</td> <td><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, <code>auto</code>, <code>topleft</code>, <code>topright</code>, <code>bottomleft</code>, <code>bottomright</code>, <code>lefttop</code>, <code>leftbottom</code>, <code>righttop</code>, <code>rightbottom</code></td> </tr> <tr> <td><code>triggers</code></td> <td><code>hover focus</code></td> <td>Space separated list of event(s), which will trigger open/close of tooltip</td> <td><code>hover</code>, <code>focus</code>, <code>click</code>. Note <code>blur</code> is a special use case to close tooltip on next click, usually used in conjunction with <code>click</code>.</td> </tr> <tr> <td><code>no-fade</code></td> <td><code>false</code></td> <td>Disable fade animation when set to <code>true</code></td> <td><code>true</code> or <code>false</code></td> </tr> <tr> <td><code>delay</code></td> <td><code>0</code></td> <td>Delay showing and hiding of tooltip by specified number of milliseconds. Can also be specified as an object in the form of <code>{ show: 100, hide: 400 }</code> allowing different show and hide delays</td> <td><code>0</code> and up, integers only.</td> </tr> <tr> <td><code>offset</code></td> <td><code>0</code></td> <td>Shift the center of the tooltip by specified number of pixels</td> <td>Any negative or positive integer</td> </tr> <tr> <td><code>container</code></td> <td><code>null</code></td> <td>Element string ID to append rendered tooltip into. If <code>null</code> or element not found, tooltip is appended to <code>&lt;body&gt;</code> (default)</td> <td>Any valid in-document unique element ID.</td> </tr> </tbody> </table> <h3 id=programmatically-show-and-hide-tooltip>Programmatically show and hide tooltip</h3> <p>You can manually control the visibility of a tooltip via the syncable Boolean <code>show</code> prop. Setting it to <code>true</code> will show the tooltip, while setting it to <code>false</code> will hide the tooltip.</p> <pre class=hljs><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;text-center&quot;</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>id</span>=<span class=hljs-string>&quot;tooltipButton-1&quot;</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>br</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>br</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>&quot;show = !show&quot;</span>&gt;</span>Toggle Tooltip<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-tooltip</span> <span class=hljs-attr>:show.sync</span>=<span class=hljs-string>&quot;show&quot;</span> <span class=hljs-attr>target</span>=<span class=hljs-string>&quot;tooltipButton-1&quot;</span> <span class=hljs-attr>placement</span>=<span class=hljs-string>&quot;top&quot;</span>&gt;</span>\n      Hello <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>World!<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-tooltip</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    <span class=hljs-attr>data</span>: {\n      <span class=hljs-attr>show</span>: <span class=hljs-literal>true</span>\n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- tooltip-show-sync.vue --&gt;</span>\n</pre> <p>To make the tooltip shown on initial render, simply add the <code>show</code> prop on <code>&lt;b-tooltip&gt;</code>:</p> <pre class=hljs><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;text-center&quot;</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>id</span>=<span class=hljs-string>&quot;tooltipButton-2&quot;</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;primary&quot;</span>&gt;</span>Button<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-tooltip</span> <span class=hljs-attr>show</span> <span class=hljs-attr>target</span>=<span class=hljs-string>&quot;tooltipButton-2&quot;</span>&gt;</span>\n    I start open\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-tooltip</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- tooltip-show-open.vue --&gt;</span>\n</pre> <p>Programmatic control can also be affected by submitting <code>&apos;open&apos;</code> and <code>&apos;close&apos;</code> events to the tooltip by reference.</p> <pre class=hljs> <span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n   <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n     <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;p-2&quot;</span>&gt;</span>\n       <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>id</span>=<span class=hljs-string>&quot;tooltipButton-showEvent&quot;</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;primary&quot;</span>&gt;</span>I have a popover<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n     <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n     <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;p-2&quot;</span>&gt;</span>\n       <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;px-1&quot;</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>&quot;onOpen&quot;</span>&gt;</span>Open<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n       <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;px-1&quot;</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>&quot;onClose&quot;</span>&gt;</span>Close<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n     <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n     <span class=hljs-tag>&lt;<span class=hljs-name>b-tooltip</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>&quot;tooltip&quot;</span> <span class=hljs-attr>target</span>=<span class=hljs-string>&quot;tooltipButton-showEvent&quot;</span>&gt;</span>\n       Hello <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>World!<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n     <span class=hljs-tag>&lt;/<span class=hljs-name>b-tooltip</span>&gt;</span>\n   <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n <span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n   <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n     <span class=hljs-attr>methods</span>: {\n       onOpen() {\n         <span class=hljs-keyword>this</span>.$refs.tooltip.$emit(<span class=hljs-string>&apos;open&apos;</span>)\n       },\n       onClose() {\n         <span class=hljs-keyword>this</span>.$refs.tooltip.$emit(<span class=hljs-string>&apos;close&apos;</span>)\n       }\n     }\n   }\n </span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n <span class=hljs-comment>&lt;!-- tooltip-show-ref-event.vue --&gt;</span>\n</pre> <p>You can also use <code>$root</code> events to trigger the showing and hiding of tooltip(s). See the <strong>Hiding and showing tooltips via $root events</strong> section below for details.</p> <h3 id=programmatically-disabling-tooltip>Programmatically disabling tooltip</h3> <p>You can disable tooltip via the syncable Boolean prop <code>disabled</code> (default is <code>false</code>) Setting it to <code>true</code> will disable the tooltip. If the tooltip is currently visible when disabled is set to <code>false</code>, the tooltip will remain visible until it is enabled or programmatically closed. If the tooltip is disabled/enabled via $root events (see below), your <code>disabled</code> value will be updated as long as you have provided the <code>.sync</code> prop modifier.</p> <pre class=hljs><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;p-2&quot;</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>id</span>=<span class=hljs-string>&quot;tooltipButton-disable&quot;</span> <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;p-2&quot;</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>&quot;disabled = !disabled&quot;</span>&gt;</span>\n        {{ disabled ? &apos;Enable&apos; : &apos;Disable&apos; }} Tooltip by prop\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>&quot;disableByRef&quot;</span>&gt;</span>\n        {{ disabled ? &apos;Enable&apos; : &apos;Disable&apos; }} Tooltip by $ref event\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-tooltip</span> <span class=hljs-attr>:disabled.sync</span>=<span class=hljs-string>&quot;disabled&quot;</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>&quot;tooltip&quot;</span> <span class=hljs-attr>target</span>=<span class=hljs-string>&quot;tooltipButton-disable&quot;</span>&gt;</span>\n        Hello <span class=hljs-tag>&lt;<span class=hljs-name>strong</span>&gt;</span>World!<span class=hljs-tag>&lt;/<span class=hljs-name>strong</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-tooltip</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n    data () {\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>disabled</span>: <span class=hljs-literal>false</span>\n      }\n    },\n    <span class=hljs-attr>methods</span>: {\n      disableByRef () {\n        <span class=hljs-keyword>if</span> (<span class=hljs-keyword>this</span>.disabled) {\n          <span class=hljs-keyword>this</span>.$refs.tooltip.$emit(<span class=hljs-string>&apos;enable&apos;</span>)\n        } <span class=hljs-keyword>else</span> {\n          <span class=hljs-keyword>this</span>.$refs.tooltip.$emit(<span class=hljs-string>&apos;disable&apos;</span>)\n        }\n      } \n    }\n  }\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- tooltip-disable.vue --&gt;</span>\n</pre> <blockquote> <p><strong>Note:</strong> <em>In the above example, since we are using the default tooltip triggers of <code>focus hover</code>, the tooltip will close before it is disabled due to loosing focus (and hover) to the toggle button.</em></p> </blockquote> <p>When disabled, the tooltip can be opened programmatically (either via the <code>show</code> prop, methods or events).</p> <p>You can also emit <code>$root</code> events to trigger disabling and enabling of popover(s). See the <strong>Disabling and enabling tooltips via $root events</strong> section below for details.</p> <h2 id=-v-b-tooltip-directive-usage><code>v-b-tooltip</code> Directive Usage</h2> <p>The <code>v-b-tooltip</code> directive makes adding tooltips even easier, without additional placeholder markup:</p> <pre class=hljs><span class=hljs-tag>&lt;<span class=hljs-name>b-container</span> <span class=hljs-attr>fluid</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>b-row</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>md</span>=<span class=hljs-string>&quot;6&quot;</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;py-4&quot;</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>v-b-tooltip</span>\n             <span class=hljs-attr>title</span>=<span class=hljs-string>&quot;Online!&quot;</span>\n             <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;outline-success&quot;</span>&gt;</span>\n        Live chat\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>b-col</span> <span class=hljs-attr>md</span>=<span class=hljs-string>&quot;6&quot;</span> <span class=hljs-attr>class</span>=<span class=hljs-string>&quot;py-4&quot;</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>b-btn</span> <span class=hljs-attr>v-b-tooltip.html.bottom</span>\n             <span class=hljs-attr>title</span>=<span class=hljs-string>&quot;Hello &lt;strong&gt;World!&lt;/strong&gt;&quot;</span>\n             <span class=hljs-attr>variant</span>=<span class=hljs-string>&quot;outline-success&quot;</span>&gt;</span>\n        Html chat\n      <span class=hljs-tag>&lt;/<span class=hljs-name>b-btn</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>b-col</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>b-row</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>b-container</span>&gt;</span>\n\n<span class=hljs-comment>&lt;!-- tooltip-directive-1.vue --&gt;</span>\n</pre> <p>Refer to the <a href=/docs/directives/tooltip><code>v-b-tooltip</code> documentation</a> for more information and features of the directive format.</p> <h2 id=hiding-and-showing-tooltips-via-root-events>Hiding and showing tooltips via $root events</h2> <p>You can close (hide) <strong>all open tooltips</strong> by emitting the <code>bv::hide::tooltip</code> event on $root:</p> <pre class=hljs><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>&apos;bv::hide::tooltip&apos;</span>);\n</pre> <p>To close a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument:</p> <pre class=hljs><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>&apos;bv::show::tooltip&apos;</span>, <span class=hljs-string>&apos;my-trigger-button-id&apos;</span>);\n</pre> <p>To open a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument when emitting the <code>bv::show::tooltip</code> $root event:</p> <pre class=hljs><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>&apos;bv::show::tooltip&apos;</span>, <span class=hljs-string>&apos;my-trigger-button-id&apos;</span>);\n</pre> <p>To open all popovers simultaneously, omit the <code>id</code> argument when emitting the <code>bv::show::tooltip</code> event.</p> <p>These events work for both the component <strong>and</strong> directive versions of tooltip.</p> <blockquote> <p><strong>Note:</strong> <em>the <strong>trigger element</strong> must exist in the DOM and be in a visible state in order for the tooltip to show.</em></p> </blockquote> <h2 id=disabling-and-enabling-tooltips-via-root-events>Disabling and enabling tooltips via $root events</h2> <p>You can disable <strong>all open tooltips</strong> by emitting the <code>bv::disable::tooltip</code> event on $root:</p> <pre class=hljs><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>&apos;bv::disable::tooltip&apos;</span>);\n</pre> <p>To disable a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument:</p> <pre class=hljs><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>&apos;bv::disable::tooltip&apos;</span>, <span class=hljs-string>&apos;my-trigger-button-id&apos;</span>);\n</pre> <p>To enable a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument when emitting the <code>bv::enable::tooltip</code> $root event:</p> <pre class=hljs><span class=hljs-keyword>this</span>.$root.$emit(<span class=hljs-string>&apos;bv::enable::tooltip&apos;</span>, <span class=hljs-string>&apos;my-trigger-button-id&apos;</span>);\n</pre> <p>To enable all popovers simultaneously, omit the <code>id</code> argument when emitting the <code>bv::enable::tooltip</code> event.</p> <p>These events work for both the component <strong>and</strong> directive versions of tooltip.</p> <blockquote> <p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM in order for the tooltip to be enabled or disabled.</em></p> </blockquote> <h2 id=component-reference>Component Reference</h2> '}});
//# sourceMappingURL=22.2735e3fae065bc44859b.js.map