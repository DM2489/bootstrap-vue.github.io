webpackJsonp([41],{sdth:function(s,a){s.exports='<h1 id="form-select">Form Select</h1>\n<blockquote>\n<p>Bootstrap custom <code>&lt;select&gt;</code> using custom styles. Optionally specify options based on an\narray, array of objects, or an object.</p>\n</blockquote>\n<p>Generate your select options by pasing an aray or object to the <code>options</code> props:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n      <span class="hljs-attr">options</span>: [\n        { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Please select an option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;a&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is First option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;b&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Selected Option&apos;</span> },\n        { <span class="hljs-attr">value</span>: {<span class="hljs-string">&apos;C&apos;</span>: <span class="hljs-string">&apos;3PO&apos;</span>}, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is an option with object value&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;d&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This one is disabled&apos;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }\n      ]\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-select-options.vue --&gt;</span>\n</pre>\n<p>Or manualy provide your options and optgroups:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;null&quot;</span>&gt;</span>Please select an option<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>Option A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>Option B (disabled)<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Grouped Options&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;{&apos;C&apos;:&apos;3PO&apos;}&quot;</span>&gt;</span>Option with object value<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;{&apos;R&apos;:&apos;2D2&apos;}&quot;</span>&gt;</span>Another option with object value<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-select-manual.vue --&gt;</span>\n</pre>\n<p>Feel free to mix the <code>options</code> prop with <code>&lt;option&gt;</code> and <code>&lt;optgroup&gt;</code>.\nManully placed options and optgroups will appear <em>below</em> the options generated via the\n<code>options</code> prop. To place manual options and optgroups <em>above</em> the options specified\nby the <code>options</code> prop, use the named slot <code>first</code>.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>\n        <span class="hljs-comment">&lt;!-- this slot appears above the options from &apos;options&apos; prop --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;null&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>-- Please select an option --<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- these options will appear after the ones from &apos;options&apos; prop --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C&quot;</span>&gt;</span>Option C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D&quot;</span>&gt;</span>Option D<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n      <span class="hljs-attr">options</span>: [\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;A&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Option A (from options prop)&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;B&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Option B (from options prop)&apos;</span> }\n      ]\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-select-both.vue --&gt;</span>\n</pre>\n<h2 id="options-property">Options property</h2>\n<p><code>options</code> can be an array or a key-value object. Available fields:</p>\n<ul>\n<li><strong><code>text</code></strong> Display text</li>\n<li><strong><code>value</code></strong> The selected text which will be set on <code>v-model</code></li>\n<li><strong><code>disabled</code></strong> Disables item for selection</li>\n</ul>\n<p>If you want to customize fields (for example using <code>name</code> field for display text)\nyou can easily change them using <code>text-field</code> and <code>value-field</code> props.</p>\n<h3 id="array">Array</h3>\n<pre class="hljs">[<span class="hljs-string">&apos;A&apos;</span>, <span class="hljs-string">&apos;B&apos;</span>, <span class="hljs-string">&apos;C&apos;</span>, {<span class="hljs-attr">text</span>:<span class="hljs-string">&apos;D&apos;</span>, <span class="hljs-attr">value</span>:<span class="hljs-string">&apos;d&apos;</span>, <span class="hljs-attr">disabled</span>:<span class="hljs-literal">true</span>}, <span class="hljs-string">&apos;E&apos;</span>, <span class="hljs-string">&apos;F&apos;</span>]\n</pre>\n<h3 id="array-of-objects">Array of objects</h3>\n<pre class="hljs">[\n  {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item 1&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;first&apos;</span>},\n  {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item 2&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;second&apos;</span>},\n  {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item 3&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;third&apos;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span>}\n  {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item 3&apos;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>:<span class="hljs-string">&apos;bar&apos;</span>, <span class="hljs-attr">baz</span>:<span class="hljs-literal">true</span>}}\n]\n</pre>\n<h3 id="object">Object</h3>\n<p>Keys are mapped to value and values are mapped to option object.</p>\n<pre class="hljs">{\n  <span class="hljs-attr">a</span>: <span class="hljs-string">&apos;Item A&apos;</span>,\n  <span class="hljs-attr">b</span>: <span class="hljs-string">&apos;Item B&apos;</span>,\n  <span class="hljs-attr">c</span>: {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item C&apos;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span>},\n  <span class="hljs-attr">d</span>: {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item D&apos;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;overridden_value&apos;</span>},\n  <span class="hljs-attr">e</span>: {<span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Item E&apos;</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>:<span class="hljs-string">&apos;bar&apos;</span>, <span class="hljs-attr">baz</span>:<span class="hljs-literal">true</span>}}\n}\n</pre>\n<h2 id="standard-single-select">Standard (single) select</h2>\n<p>By default, Bootstrap V4&apos;s custom select styling is applied.</p>\n<h3 id="value-in-single-mode">Value in single mode</h3>\n<p>In non <code>multiple</code> mode, <code>&lt;b-form-select&gt;</code> returns the a single <code>value</code> of the currently\nselected option.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n      <span class="hljs-attr">options</span>: [\n        { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Please select some item&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;a&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is First option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;b&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Default Selected Option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;c&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is another option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;d&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This one is disabled&apos;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }\n      ]\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-select-3.vue --&gt;</span>\n</pre>\n<h3 id="select-sizing-displayed-rows-">Select sizing (displayed rows)</h3>\n<p>You can use the <code>select-size</code> prop to switch the custom select into a select\nlist-box, rather than a dropdown. Set the <code>select-size</code> prop to a numerical\nvalue greater than 1 to control how many rows of options are visible.</p>\n<p>Note when <code>select-size</code> is set to a value greater than 1, the Bootstrap V4 custom\nstyling will <strong>not</strong> be applied, unless the <code>multiple</code> prop is also set.</p>\n<p>Note: not all mobile browsers will show a the select as a list-box.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span> <span class="hljs-attr">:select-size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n      <span class="hljs-attr">options</span>: [\n        { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Please select some item&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;a&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option a&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;b&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Default Selected Option b&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;c&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option c&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;d&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This one is disabled&apos;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;e&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option e&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;e&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option f&apos;</span> }\n      ]\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-select-4.vue --&gt;</span>\n</pre>\n<h2 id="multiple-select-support">Multiple select support</h2>\n<p>Enable multiple select mode by setting the prop <code>multiple</code>, and control how many\nrows are displayed in the multiple select list-box by setting <code>select-size</code> to\nthe number of rows to display. The default is to let the browser use it&apos;s default\n(typically 4).</p>\n<h3 id="value-in-multiple-mode">Value in multiple mode</h3>\n<p>In <code>multiple</code> mode, <code>&lt;b-form-select&gt;</code> always returns an array of option values.\nYou <strong>must</strong> provide an array reference as your <code>v-model</code> when in <code>multiple</code> mode.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:select-size</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">selected</span>: [<span class="hljs-string">&apos;b&apos;</span>], <span class="hljs-comment">// Array reference</span>\n      options: [\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;a&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is First option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;b&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;Default Selected Option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;c&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is another option&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;d&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This one is disabled&apos;</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;e&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option e&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;f&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option f&apos;</span> },\n        { <span class="hljs-attr">value</span>: <span class="hljs-string">&apos;g&apos;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&apos;This is option g&apos;</span> }\n      ]\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-select-5.vue --&gt;</span>\n</pre>\n<h2 id="control-sizing">Control sizing</h2>\n<p>Set the form-control text size using the <code>size</code> prop to <code>sm</code> or <code>lg</code> for small or\nlarge respectively.</p>\n<p>By default <code>&lt;b-form-select&gt;</code> will occupy the full width of the container that it\nappears in. To control the select width, place the input inside standard Bootstrap\ngrid column.</p>\n<h2 id="contextual-states">Contextual States</h2>\n<p>Bootstrap includes validation styles for <code>valid</code> and <code>invalid</code> states\non most form controls.</p>\n<p>Generally speaking, you&#x2019;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code>&apos;invalid&apos;</code> is great for when there&#x2019;s a blocking or required field. A user must fill in this field properly to submit the form.</li>\n<li><code>&apos;valid&apos;</code> is ideal for situations when you have per-field validation throughout a form and want to encourage a user through the rest of the fields.</li>\n<li><code>null</code> Displays no validation state</li>\n</ul>\n<p>To apply one of the contextual states on <code>&lt;b-form-select&gt;</code>, set the <code>state</code> prop\nto <code>&apos;invalid&apos;</code> (or <code>false</code>), <code>&apos;valid&apos;</code> (or <code>true</code>), or <code>null</code>.</p>\n<h3 id="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users-">Conveying contextual validation state to assistive technologies and colorblind users:</h3>\n<p>Using these contextual states to denote the state of a form control only provides\na visual, color-based indication, which will not be conveyed to users of assistive\ntechnologies - such as screen readers - or to colorblind users.</p>\n<p>Ensure that an alternative indication of state is also provided. For instance, you\ncould include a hint about state in the form control&apos;s <code>&lt;label&gt;</code> text itself, or by\nproviding an additional help text block (via <code>&lt;b-form-group&gt;</code> or <code>&lt;b-form-feedback&gt;</code>).\nSpecifically for assistive technologies, invalid form controls can also be assigned\nan <code>aria-invalid=&quot;true&quot;</code> attribute (see below).</p>\n<h3 id="aria-aria-invalid-attribute-">ARIA <code>aria-invalid</code> attribute:</h3>\n<p>When <code>&lt;b-form-select&gt;</code> has an invalid contextual state (i.e. <code>invalid</code>) you may also\nwant to set the <code>&lt;b-form-select&gt;</code> prop <code>aria-invalid</code> to <code>true</code>.</p>\n<p>Supported <code>invalid</code> values are:</p>\n<ul>\n<li><code>false</code> (default) No errors detected</li>\n<li><code>true</code> The value has failed validation.</li>\n</ul>\n<p>When <code>state</code> is set to <code>invalid</code>, aria-invalid will also be set to true.</p>\n<h2 id="non-custom-select">Non custom select</h2>\n<p>Set the prop <code>plain</code> to have a native browser <code>&lt;select&gt;</code> rendered (although the class\n<code>.form-control</code> will always be placed on the select).</p>\n<p>A <code>plain</code> select will always be rendered for non <code>multiple</code> selects which have the\n<code>select-size</code> prop set to a value greater than 1.</p>\n<h2 id="aliases">Aliases</h2>\n<ul>\n<li><code>&lt;b-form-select&gt;</code> can be used by the shorter alias <code>&lt;b-select&gt;</code>.</li>\n</ul>\n<h2 id="component-reference">Component Reference</h2>\n'}});
//# sourceMappingURL=components17.f7d7d1b635a1b024c0ec.js.map