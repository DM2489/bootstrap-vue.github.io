webpackJsonp([22],{hwfG:function(s,t){s.exports='<h1 id="tooltips">Tooltips</h1>\n<blockquote>\n<p>Easily add tooltips to elements or components via the <code>&lt;b-tooltip&gt;</code> component or\n<a href="/docs/directives/tooltip"><code>v-b-tooltip</code></a> directive (preferred method).</p>\n</blockquote>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center my-3&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">v-b-tooltip.hover</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;I&apos;m a tooltip!&quot;</span>&gt;</span>Hover Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- tooltip-example-1.vue --&gt;</span>\n</pre>\n<h2 id="overview">Overview</h2>\n<p>Things to know when using tooltip component:</p>\n<ul>\n<li>Tooltips rely on the 3rd party library Popper.js for positioning. The library is bundled with Bootstrap-Vue in the dist files!</li>\n<li>Tooltips with zero-length titles are never displayed.</li>\n<li>Triggering tooltips on hidden elements will not work.</li>\n<li>Specify <code>container</code> as <code>null</code> (default, appends to <code>&lt;body&gt;</code>) to avoid rendering problems in more complex components (like input groups, button groups, etc). You can use container to optionally specify a different element to append the rendered tooltip to.</li>\n<li>Tooltips for <code>disabled</code> elements must be triggered on a wrapper element.</li>\n<li>When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use white-space: nowrap; on your <code>&lt;a&gt;</code>s, <code>&lt;b-link&gt;</code>s and <code>&lt;router-link&gt;</code>s to avoid this behavior.</li>\n<li>Tooltips must be hidden before their corresponding elements have been removed from the DOM.</li>\n</ul>\n<p>The <code>&lt;b-tooltip</code> component inserts a hidden (<code>display:none</code>) <code>&lt;div&gt;</code> intermediate container\nelement at the point in the DOM where the <code>&lt;b-tooltip&gt;</code> component is placed. This may\naffect layout and/or styling of components such as <code>&lt;b-button-group&gt;</code>, <code>&lt;b-button-toolbar&gt;</code>,\nand <code>&lt;b-input-group&gt;</code>. To avoid these possible layout issues, place the <code>&lt;b-tooltip&gt;</code>\ncomponent <strong>outside</strong> of these types of components.</p>\n<p>The target element <strong>must</strong> exist in the document before <code>&lt;b-tooltip&gt;</code> is mounted. If the\ntarget element is not found during mount, the tooltip will never open. Always place\nyour <code>&lt;b-tooltip&gt;</code> component lower in the DOM than your target element. This rule also applies\nif a callback is used as target element, since that callback is called only once on mount.</p>\n<p><strong>Note:</strong> <em>When using the default slot for the title, <code>&lt;b-tooltip&gt;</code> transfers the\nrendered DOM from that slot into the tooltip&apos;s markup when shown, and returns\nthe content back to the <code>&lt;b-tooltip&gt;</code> component when hidden. This may cause some issues\nin rare circumstances, so please test your implementation accordingly! The <code>title</code>\nprop does not have this behavior. For simple tooltips, we recommend using the\n<code>v-b-tooltip</code> directive and enable the <code>html</code> modifier if needed.</em></p>\n<h2 id="positioning">Positioning</h2>\n<p>Twelve options are available for positioning: <code>top</code>, <code>topleft</code>, <code>topright</code>, <code>right</code>, <code>righttop</code>,\n<code>rightbottom</code>, <code>bottom</code>, <code>bottomleft</code>, <code>bottomright</code>, <code>left</code>, <code>lefttop</code>, and <code>leftbottom</code> aligned.\nThe default position is <code>top</code>. Positioning is relative to the trigger element.</p>\n<div class="bd-example bd-example-tooltip-static">\n  <div class="tooltip bs-tooltip-top bs-tooltip-top-docs" role="tooltip">\n    <div class="arrow"></div>\n    <div class="tooltip-inner">\n      Tooltip on the top\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-top bs-tooltip-top-docs" role="tooltip">\n    <div class="arrow" style="left:93%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the topleft\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-top bs-tooltip-top-docs" role="tooltip">\n    <div class="arrow" style="left:5%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the topright\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-right bs-tooltip-right-docs" role="tooltip">\n    <div class="arrow"></div>\n    <div class="tooltip-inner">\n      Tooltip on the right\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-right bs-tooltip-right-docs" role="tooltip">\n    <div class="arrow" style="top:60%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the righttop\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-right bs-tooltip-right-docs" role="tooltip">\n    <div class="arrow" style="top:26%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the rightbottom\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role="tooltip">\n    <div class="arrow"></div>\n    <div class="tooltip-inner">\n      Tooltip on the bottom\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role="tooltip">\n    <div class="arrow" style="left:93%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the bottomleft\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-bottom bs-tooltip-bottom-docs" role="tooltip">\n    <div class="arrow" style="left:5%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the bottomright\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-left bs-tooltip-left-docs" role="tooltip">\n    <div class="arrow"></div>\n    <div class="tooltip-inner">\n      Tooltip on the left\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-left bs-tooltip-left-docs" role="tooltip">\n    <div class="arrow" style="top:60%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the lefttop\n    </div>\n  </div>\n  <div class="tooltip bs-tooltip-left bs-tooltip-left-docs" role="tooltip">\n    <div class="arrow" style="top:26%"></div>\n    <div class="tooltip-inner">\n      Tooltip on the leftbottom\n    </div>\n  </div>\n</div>\n\n\n<h2 id="triggers">Triggers</h2>\n<p>Tooltips can be triggered (opened/closed) via any combination of <code>click</code>, <code>hover</code>\nand <code>focus</code>. The default trigger is <code>hover focus</code>.</p>\n<p>If a tooltip has more than one trigger, then all triggers must be cleared before the\ntooltip will close. I.e. if a tooltip has the trigger <code>focus click</code>, and it was opened\nby <code>focus</code>, and the user then clicks the trigger element, they must click it again\n<strong>and</strong> move focus to close the tooltip.</p>\n<h2 id="b-tooltip-component-usage"><code>&lt;b-tooltip&gt;</code> Component Usage</h2>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exButton1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Live chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exButton2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Html chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;exButton3&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>Alternative chat<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Tooltip title specified via prop title --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;exButton1&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Online!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- HTML title specified via default slot --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;exButton2&quot;</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>\n    Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Tooltip for an element identified by ref --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">:target</span>=<span class="hljs-string">&quot;() =&gt; $refs.exButton3&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Alternative!&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- tooltip-component-1.vue --&gt;</span>\n</pre>\n<h3 id="component-options">Component Options</h3>\n<table class="table b-table table-sm table-striped">\n<thead class="thead-default">\n<tr>\n<th>Prop</th>\n<th>Default</th>\n<th>Description</th>\n<th>Supported values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>target</code></td>\n<td><code>null</code></td>\n<td>Element String ID, or a reference to an element or component, or a function returning either of them, that you want to trigger the tooltip. <strong>Required</strong></td>\n<td>Any valid, in-document unique element ID, element reference or component reference or a function returning any such ID / reference</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td><code>null</code></td>\n<td>Tooltip content (text only, no HTML). if HTML is required, place it in the default slot</td>\n<td>Plain text</td>\n</tr>\n<tr>\n<td><code>placement</code></td>\n<td><code>top</code></td>\n<td>Tooltip position, relative to the trigger element.</td>\n<td><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, <code>auto</code>, <code>topleft</code>, <code>topright</code>, <code>bottomleft</code>, <code>bottomright</code>, <code>lefttop</code>, <code>leftbottom</code>, <code>righttop</code>, <code>rightbottom</code></td>\n</tr>\n<tr>\n<td><code>triggers</code></td>\n<td><code>hover focus</code></td>\n<td>Space separated list of event(s), which will trigger open/close of tooltip</td>\n<td><code>hover</code>, <code>focus</code>, <code>click</code>. Note <code>blur</code> is a special use case to close tooltip on next click, usually used in conjunction with <code>click</code>.</td>\n</tr>\n<tr>\n<td><code>no-fade</code></td>\n<td><code>false</code></td>\n<td>Disable fade animation when set to <code>true</code></td>\n<td><code>true</code> or <code>false</code></td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td><code>0</code></td>\n<td>Delay showing and hiding of tooltip by specified number of milliseconds. Can also be specified as an object in the form of <code>{ show: 100, hide: 400 }</code> allowing different show and hide delays</td>\n<td><code>0</code> and up, integers only.</td>\n</tr>\n<tr>\n<td><code>offset</code></td>\n<td><code>0</code></td>\n<td>Shift the center of the tooltip by specified number of pixels</td>\n<td>Any negative or positive integer</td>\n</tr>\n<tr>\n<td><code>container</code></td>\n<td><code>null</code></td>\n<td>Element string ID to append rendered tooltip into. If <code>null</code> or element not found, tooltip is appended to <code>&lt;body&gt;</code> (default)</td>\n<td>Any valid in-document unique element ID.</td>\n</tr>\n<tr>\n<td><code>boundary</code></td>\n<td><code>&apos;scrollParent&apos;</code></td>\n<td>The container that the tooltip will be constrained visually. The default should suffice in most cases, but you may need to chagne this if your target element is in a small container with overflow scroll</td>\n<td><code>&apos;scrollParent&apos;</code> (default), <code>&apos;viewport&apos;</code>, <code>&apos;window&apos;</code>, or a reference to an HTML element.</td>\n</tr>\n</tbody>\n</table>\n<h3 id="programmatically-show-and-hide-tooltip">Programmatically show and hide tooltip</h3>\n<p>You can manually control the visibility of a tooltip via the syncable Boolean <code>show</code> prop.\nSetting it to <code>true</code> will show the tooltip, while setting it to <code>false</code> will hide the tooltip.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltipButton-1&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span>Toggle Tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltipButton-1&quot;</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">data</span>: {\n      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- tooltip-show-sync.vue --&gt;</span>\n</pre>\n<p>To make the tooltip shown on initial render, simply add the <code>show</code> prop\non <code>&lt;b-tooltip&gt;</code>:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltipButton-2&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">show</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltipButton-2&quot;</span>&gt;</span>\n    I start open\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- tooltip-show-open.vue --&gt;</span>\n</pre>\n<p>Programmatic control can also be affected by submitting <code>&apos;open&apos;</code> and <code>&apos;close&apos;</code>\nevents to the tooltip by reference.</p>\n<pre class="hljs"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n       <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltipButton-showEvent&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n       <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onOpen&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n       <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;px-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClose&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tooltip&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltipButton-showEvent&quot;</span>&gt;</span>\n       Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n     <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n   <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n     <span class="hljs-attr">methods</span>: {\n       onOpen() {\n         <span class="hljs-keyword">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&apos;open&apos;</span>)\n       },\n       onClose() {\n         <span class="hljs-keyword">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&apos;close&apos;</span>)\n       }\n     }\n   }\n </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n <span class="hljs-comment">&lt;!-- tooltip-show-ref-event.vue --&gt;</span>\n</pre>\n<p>You can also use <code>$root</code> events to trigger the showing and hiding of tooltip(s).\nSee the <strong>Hiding and showing tooltips via $root events</strong> section below for details.</p>\n<h3 id="programmatically-disabling-tooltip">Programmatically disabling tooltip</h3>\n<p>You can disable tooltip via the syncable Boolean prop <code>disabled</code> (default is <code>false</code>)\nSetting it to <code>true</code> will disable the tooltip. If the tooltip is currently visible\nwhen disabled is set to <code>false</code>, the tooltip will remain visible until it is enabled\nor programmatically closed. If the tooltip is disabled/enabled via $root events (see\nbelow), your <code>disabled</code> value will be updated as long as you have provided the <code>.sync</code>\nprop modifier.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex flex-column text-md-center&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tooltipButton-disable&quot;</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>I have a tooltip<span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-2&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disabled = !disabled&quot;</span>&gt;</span>\n        {{ disabled ? &apos;Enable&apos; : &apos;Disable&apos; }} Tooltip by prop\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;disableByRef&quot;</span>&gt;</span>\n        {{ disabled ? &apos;Enable&apos; : &apos;Disable&apos; }} Tooltip by $ref event\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tooltip</span> <span class="hljs-attr">:disabled.sync</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tooltip&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;tooltipButton-disable&quot;</span>&gt;</span>\n        Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tooltip</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data () {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      disableByRef () {\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.disabled) {\n          <span class="hljs-keyword">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&apos;enable&apos;</span>)\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-keyword">this</span>.$refs.tooltip.$emit(<span class="hljs-string">&apos;disable&apos;</span>)\n        }\n      } \n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- tooltip-disable.vue --&gt;</span>\n</pre>\n<blockquote>\n<p><strong>Note:</strong> <em>In the above example, since we are using the default tooltip triggers of\n<code>focus hover</code>, the tooltip will close before it is disabled due to loosing focus (and hover)\nto the toggle button.</em></p>\n</blockquote>\n<p>When disabled, the tooltip can be opened programmatically (either via the <code>show</code> prop,\nmethods or events).</p>\n<p>You can also emit <code>$root</code> events to trigger disabling and enabling of popover(s). See\nthe <strong>Disabling and enabling tooltips via $root events</strong> section below for details.</p>\n<h2 id="v-b-tooltip-directive-usage"><code>v-b-tooltip</code> Directive Usage</h2>\n<p>The <code>v-b-tooltip</code> directive makes adding tooltips even easier, without additional placeholder markup:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">v-b-tooltip</span>\n             <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Online!&quot;</span>\n             <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>\n        Live chat\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;py-4&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-btn</span> <span class="hljs-attr">v-b-tooltip.html.bottom</span>\n             <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Hello &lt;strong&gt;World!&lt;/strong&gt;&quot;</span>\n             <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;outline-success&quot;</span>&gt;</span>\n        Html chat\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-btn</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- tooltip-directive-1.vue --&gt;</span>\n</pre>\n<p>Refer to the <a href="/docs/directives/tooltip"><code>v-b-tooltip</code> documentation</a> for more information\nand features of the directive format.</p>\n<h2 id="hiding-and-showing-tooltips-via-root-events">Hiding and showing tooltips via $root events</h2>\n<p>You can close (hide) <strong>all open tooltips</strong> by emitting the <code>bv::hide::tooltip</code> event on $root:</p>\n<pre class="hljs"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&apos;bv::hide::tooltip&apos;</span>);\n</pre>\n<p>To close a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument:</p>\n<pre class="hljs"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&apos;bv::show::tooltip&apos;</span>, <span class="hljs-string">&apos;my-trigger-button-id&apos;</span>);\n</pre>\n<p>To open a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument when\nemitting the <code>bv::show::tooltip</code> $root event:</p>\n<pre class="hljs"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&apos;bv::show::tooltip&apos;</span>, <span class="hljs-string">&apos;my-trigger-button-id&apos;</span>);\n</pre>\n<p>To open all popovers simultaneously, omit the <code>id</code> argument when emitting the\n<code>bv::show::tooltip</code> event.</p>\n<p>These events work for both the component <strong>and</strong> directive versions of tooltip.</p>\n<blockquote>\n<p><strong>Note:</strong> <em>the <strong>trigger element</strong> must exist in the DOM and be in a visible state in order for the tooltip to show.</em></p>\n</blockquote>\n<h2 id="disabling-and-enabling-tooltips-via-root-events">Disabling and enabling tooltips via $root events</h2>\n<p>You can disable <strong>all open tooltips</strong> by emitting the <code>bv::disable::tooltip</code> event on $root:</p>\n<pre class="hljs"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&apos;bv::disable::tooltip&apos;</span>);\n</pre>\n<p>To disable a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument:</p>\n<pre class="hljs"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&apos;bv::disable::tooltip&apos;</span>, <span class="hljs-string">&apos;my-trigger-button-id&apos;</span>);\n</pre>\n<p>To enable a <strong>specific tooltip</strong>, pass the trigger element&apos;s <code>id</code> as the argument when\nemitting the <code>bv::enable::tooltip</code> $root event:</p>\n<pre class="hljs"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">&apos;bv::enable::tooltip&apos;</span>, <span class="hljs-string">&apos;my-trigger-button-id&apos;</span>);\n</pre>\n<p>To enable all popovers simultaneously, omit the <code>id</code> argument when emitting the\n<code>bv::enable::tooltip</code> event.</p>\n<p>These events work for both the component <strong>and</strong> directive versions of tooltip.</p>\n<blockquote>\n<p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM in order for the\ntooltip to be enabled or disabled.</em></p>\n</blockquote>\n<h2 id="component-reference">Component Reference</h2>\n'}});
//# sourceMappingURL=components35.1c949262f40f42ae6138.js.map