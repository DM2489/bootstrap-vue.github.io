(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{361:function(s,a){s.exports='<h1 id="form-file-input">Form File Input</h1>\n<blockquote>\n<p>Customized, cross-browser consistant, file input control that supports single file,\nmultiple files, and directory upload (for browsers that support directory mode)</p>\n</blockquote>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Styled --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;Boolean(file)&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Choose a file...&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected file: {{file &amp;&amp; file.name}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Plain mode --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;file2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span> <span class="hljs-attr">plain</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-3&quot;</span>&gt;</span>Selected file: {{file2 &amp;&amp; file2.name}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">file</span>: <span class="hljs-literal">null</span>,\n      <span class="hljs-attr">file2</span>: <span class="hljs-literal">null</span>\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-file.vue --&gt;</span>\n</pre>\n<p>For cross browser consistency, Form file defaults to the Bootstrap custom file\ninput to replace the browser defaults. They&#x2019;re built on top of semantic and accessible\nmarkup, so it is a solid replacement for the default file input.</p>\n<h2 id="single-file-default-">Single file (default)</h2>\n<p>On single file mode, when no file is selected or user cancels Browse dialog, <code>v-model</code> is <code>null</code>\nindicating no file selected. When a file is selected the return value will be a javascript\n<a href="https://developer.mozilla.org/en/docs/Web/API/File"><code>File</code></a> object instance.</p>\n<h2 id="multiple-files">Multiple files</h2>\n<p>Multiple file uploading is supported by adding <code>multiple</code> prop to component.\nIn this case <code>v-model</code> is <em>always</em> an <code>Array</code>. When no files are selected, an empty array\nwill be returned. When a file or files are selected the return value will be an array of\njavascript <a href="https://developer.mozilla.org/en/docs/Web/API/File"><code>File</code></a> object instances.</p>\n<h2 id="directory-mode">Directory mode</h2>\n<p>By adding <code>directory</code> prop, the user can select directories instead of files.\nWhen a directory is selected, the directory and its entire hierarchy of contents are included in the set of selected items.\nThe selected file system entries can be obtained using the <code>webkitEntries</code> property.</p>\n<p><strong>CAUTION</strong> This is a non standard feature while being supported by latest Firefox and Chrome versions, and should not\nbe relied for production.\n<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory">Read more on MDN</a></p>\n<h2 id="drag-and-drop">Drag and Drop</h2>\n<p>Drop mode is enabled by default. it can disabled by setting the <code>no-drop</code> prop.</p>\n<h2 id="limiting-to-certain-file-types">Limiting to certain file types</h2>\n<p>You can limit the file types by setting the <code>accept</code> prop to a string containing the\nallowed file type(s). To specify more than one type, separate the values with a comma.</p>\n<pre class="hljs"><span class="hljs-comment">&lt;!-- Accept all image formats by IANA media type wildcard--&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- Accept specific image formats by IANA type --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/jpeg, image/png, image/gif&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- Accept specific image formats by extension --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;.jpg, .png, .gif&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n</pre>\n<p>To accept any file type, leave <code>accept</code> as null (default). You can mix and match IANA\nmedia types and extensions.</p>\n<p>Refer to <a href="http://www.iana.org/assignments/media-types/">IANA Media Types</a> for a complete\nlist of standard media types.</p>\n<p><strong>Note:</strong> Not all browsers support or respect the <code>accept</code> attribute on file inputs.</p>\n<h2 id="customize-browse-label">Customize browse label</h2>\n<p>If you want to globally change <code>Browse</code> label, you can add something like this to your global stylesheets.\nAlso it is advised to use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:lang">:lang()</a> for multi-language sites.</p>\n<pre class="hljs"><span class="hljs-selector-class">.custom-file-input</span><span class="hljs-selector-pseudo">:lang(en)</span>~<span class="hljs-selector-class">.custom-file-label</span><span class="hljs-selector-pseudo">::after</span> {\n    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;Browse&quot;</span>;\n}\n</pre>\n<h2 id="non-custom-file-input">Non custom file input</h2>\n<p>You can have <code>&lt;b-form-file&gt;</code> render a browser native file input by setting the <code>plain</code> prop.</p>\n<h2 id="contextual-state-feedback">Contextual state feedback</h2>\n<p>Bootstrap includes validation styles for <code>valid</code> and <code>invalid</code> states\non most form controls.</p>\n<p>Generally speaking, you&#x2019;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code>&apos;invalid&apos;</code> is great for when there&#x2019;s a blocking or required field. A user must fill in\nthis field properly to submit the form.</li>\n<li><code>&apos;valid&apos;</code> is ideal for situations when you have per-field validation throughout a form\nand want to encourage a user through the rest of the fields.</li>\n<li><code>null</code> Displayes no validation state</li>\n</ul>\n<p>To apply one of the contextual state icons on <code>&lt;b-form-file</code>, set the <code>state</code> prop\nto <code>&apos;invalid&apos;</code> (or <code>false</code>), <code>&apos;valid&apos;</code> ( or <code>true</code>), or <code>null</code>.</p>\n<h2 id="accessibility">Accessibility</h2>\n<p>When using the custom version of  <code>&lt;b-form-file&gt;</code> input which hides the original input, it is\n<strong>highly recommended</strong> that you supply a document unique ID string via the <code>id</code> prop. This will\nautomatically render the extra ARIA atributes required to improve usability for persons using\nassitive technologies.</p>\n<h2 id="clearing-the-file-selection">Clearing the file selection</h2>\n<p>Because of limitations in the value binding with <code>&lt;input type=&quot;file&quot;&gt;</code> elements, <code>v-model</code>\nfor <code>&lt;b-form-file&gt;</code> is unidirectional, and cannot be used to set or clear the file(s) selection.\nTo get around this limitation, <code>&lt;b-form-file&gt;</code> provides a <code>reset()</code> method that can be\ncalled to clear the file input.</p>\n<p>To take advantage of the <code>reset()</code> method, you will need to obtain a reference\nto the <code>&lt;b-form-file&gt;</code> component:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;#app&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-file</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileinput&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-file</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clearFiles&quot;</span>&gt;</span>Reset<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</pre>\n<pre class="hljs"><span class="hljs-built_in">window</span>.app = <span class="hljs-keyword">new</span> Vue({\n  <span class="hljs-attr">el</span>: <span class="hljs-string">&apos;#app&apos;</span>,\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">file</span>: <span class="hljs-literal">null</span>\n    }\n  },\n  <span class="hljs-attr">methods</span>: {\n    clearFiles () {\n      <span class="hljs-keyword">this</span>.$refs.fileinput.reset();\n    }\n  }\n})\n</pre>\n<h2 id="component-alias">Component alias</h2>\n<p><code>&lt;b-form-file&gt;</code> can be used via the shorter component alians <code>&lt;b-file&gt;</code>.</p>\n<h2 id="component-reference">Component Reference</h2>\n'}}]);