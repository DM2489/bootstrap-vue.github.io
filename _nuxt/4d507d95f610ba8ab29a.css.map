{"version":3,"sources":["webpack:///./docs/components/docs/components/componentdoc.vue"],"names":[],"mappings":"AAuEA,oGACA,e","file":"4d507d95f610ba8ab29a.css","sourcesContent":["<template>\n  <section\n    class=\"bd-content\"\n    v-if=\"component\">\n\n    <b-row\n      tag=\"header\"\n      align-v=\"center\">\n      <b-col sm=\"9\"><h2><code>{{ tag }}</code></h2></b-col>\n      <b-col\n        sm=\"3\"\n        class=\"text-sm-right\">\n        <b-btn\n          variant=\"outline-secondary\"\n          size=\"sm\"\n          :href=\"githubURL\"\n          target=\"_blank\">view source</b-btn>\n      </b-col>\n    </b-row>\n\n    <article v-if=\"props_items && props_items.length > 0\">\n      <h4>Properties</h4>\n      <b-table\n        :items=\"props_items\"\n        :fields=\"props_fields\"\n        small\n        head-variant=\"default\"\n        striped>\n        <template\n          slot=\"default\"\n          slot-scope=\"field\">\n          <code v-if=\"field.value\">{{ field.value }}</code>\n        </template>\n      </b-table>\n    </article>\n\n    <article v-if=\"slots && slots.length > 0\">\n      <h4>Slots</h4>\n      <b-table\n        :items=\"slots\"\n        :fields=\"slots_fields\"\n        small\n        head-variant=\"default\"\n        striped/>\n    </article>\n\n    <article v-if=\"events && events.length > 0\">\n      <h4>Events</h4>\n      <b-table\n        :items=\"events\"\n        :fields=\"events_fields\"\n        small\n        head-variant=\"default\"\n        striped>\n        <template\n          slot=\"args\"\n          slot-scope=\"field\">\n          <div\n            v-for=\"arg in field.value\"\n            :key=\"'' + arg\">\n            <code v-if=\"arg.arg\">{{ arg.arg }}</code>\n            <span v-html=\"arg.description\"/>\n          </div>\n        </template>\n      </b-table>\n    </article>\n\n  </section>\n</template>\n\n<style scoped>\n    h1, h2, h3, h4, h5 {\n        padding: 20px 0;\n    }\n</style>\n\n<script>\nimport Vue from 'vue'\nimport kebabCase from 'lodash/kebabCase'\n\nexport default {\n  props: {\n    component: {},\n    slots: {\n      type: Array,\n      default: () => []\n    },\n    events: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    componentOptions () {\n      const component = Vue.options.components[this.component]\n      return (component && component.options) ? component.options : {}\n    },\n    props_fields () {\n      const component = Vue.options.components[this.component]\n      let props = []\n      if (component) {\n        props = component.options.props\n      }\n      const hasRequired = props.length > 0 && props.filter(p => p.required).length > 0\n\n      const fields = {\n        prop: {label: 'Property'},\n        type: {label: 'Type'},\n        default: {label: 'Default Value'}\n      }\n\n      // Add the required column if there are required field(s)\n      if (hasRequired) {\n        fields.required = {label: 'Required'}\n      }\n\n      return fields\n    },\n    events_fields () {\n      return {\n        event: {label: 'Event'},\n        args: {label: 'Arguments'},\n        description: {label: 'Description'}\n      }\n    },\n    slots_fields () {\n      return {\n        name: {label: 'Slot'},\n        description: {label: 'Description'}\n      }\n    },\n    props_items () {\n      const component = Vue.options.components[this.component]\n      if (!component) {\n        return {}\n      }\n\n      const props = component.options.props\n      return Object.keys(props).map(prop => {\n        const p = props[prop]\n\n        // Describe type\n        let type = p.type || Object\n        let typeClass = String\n        if (Array.isArray(type)) {\n          typeClass = type[0]\n          type = type.map(t => t.name).join(' or ')\n        } else {\n          typeClass = type\n          type = type.name\n        }\n\n        // Describe value\n        let default_val = p.default\n\n        if (default_val instanceof Function && !Array.isArray(default_val)) {\n          default_val = default_val()\n        }\n\n        if (typeof default_val !== 'string') {\n          default_val = JSON.stringify(default_val)\n        }\n\n        if (default_val === '' || default_val === null || default_val === 'null') {\n          default_val = ''\n        }\n\n        default_val = (default_val || '').replace(/\"/g, '\\'')\n\n        // Requied prop?\n        const required = p.required ? 'Yes' : ''\n\n        return {\n          prop: kebabCase(prop),\n          type,\n          required,\n          typeClass,\n          default: default_val\n        }\n      })\n    },\n    componentName () {\n      return kebabCase(this.component)\n    },\n    tag () {\n      return '<' + this.componentName + '>'\n    },\n    githubURL () {\n      const base = 'https://github.com/bootstrap-vue/bootstrap-vue/tree/dev/src/components'\n      const slug = this.$route.params.slug\n      const name = kebabCase(this.component).replace(/^b-/, '')\n      // Always point to the .js file (which may import a .vue file)\n      return `${base}/${slug}/${name}.js`\n    }\n  }\n}\n</script>\n"],"sourceRoot":""}