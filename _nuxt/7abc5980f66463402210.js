(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{360:function(s,a){s.exports='<h1 id="form-group">Form group</h1>\n<blockquote>\n<p>The <code>&lt;b-form-group&gt;</code> component is the easiest way to add some structure to forms. Its\npurpose is to pair form controls with a legend or label, and to provide help text and\ninvalid/valid feedback text, as well as visual (color) contextual state feedback.</p>\n</blockquote>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fieldset1&quot;</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Let us know your name.&quot;</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input1&quot;</span>\n      <span class="hljs-attr">:invalid-feedback</span>=<span class="hljs-string">&quot;invalidFeedback&quot;</span>\n      <span class="hljs-attr">:valid-feedback</span>=<span class="hljs-string">&quot;validFeedback&quot;</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span>\n  &gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input1&quot;</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">&quot;state&quot;</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">computed</span>: {\n    state () {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.length &gt;= <span class="hljs-number">4</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>\n    },\n    invalidFeedback () {\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.name.length &gt; <span class="hljs-number">4</span>) {\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&apos;&apos;</span>\n      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.name.length &gt; <span class="hljs-number">0</span>) {\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&apos;Enter at least 4 characters&apos;</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-string">&apos;Please enter something&apos;</span>\n      }\n    },\n    validFeedback () {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.state === <span class="hljs-literal">true</span> ? <span class="hljs-string">&apos;Thank you&apos;</span> : <span class="hljs-string">&apos;&apos;</span>\n    }\n  },\n  data () {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">name</span>: <span class="hljs-string">&apos;&apos;</span>\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-group-1.vue --&gt;</span>\n</pre>\n<h2 id="label">Label</h2>\n<p>Use the prop <code>label</code> to set the content of the generated <code>&lt;legend&gt;</code> or <code>&lt;label&gt;</code> element (html\nsupported), or by using the named slot <code>label</code>, You may optionally visually hide the label text\nwhile still making it available to screen readers by setting the prop <code>label-sr-only</code>.</p>\n<p><code>&lt;b-form-group&gt;</code> will render a <code>&lt;fieldset&gt;</code> with <code>&lt;legend&gt;</code> if the <code>label-for</code> prop is not\nset. If an input ID is provided to the <code>label-for</code> prop, then a <code>&lt;div&gt;</code> with <code>&lt;label&gt;</code> will\nbe rendered.</p>\n<p>If you provide an input <code>id</code> value to the <code>label-for</code> prop (the <code>id</code> must exist on the\ninput contained within the <code>&lt;b-form-group&gt;</code>), a <code>&lt;label&gt;</code> element will be rendered instead\nof a <code>&lt;legend&gt;</code> element, and will have the <code>for</code> attribute set to the <code>id</code> specified.\nWhen specifying the id, <strong>do not</strong> prepend it with <code>#</code>. The <code>label-for</code> prop should only\nbe used when you have a single form input inside the <code>&lt;b-form-group&gt;</code> component. Do not\nset the <code>label-for</code> prop when using <code>&lt;b-form-radio-group&gt;</code>, <code>&lt;b-form-checkbox-group&gt;</code>,\n<code>&lt;b-form-radio&gt;</code>, <code>&lt;b-form-checkbox&gt;</code> or <code>&lt;b-form-file&gt;</code> components, as these inputs\ninclude integrated label element(s) and the <code>&lt;legend&gt;</code> element is more suitable.</p>\n<p>The label text may also optionally be aligned <code>left</code>, <code>center</code> or <code>right</code> by setting\nthe respective value via the prop <code>label-text-align</code>. Alignment has no effect if\n<code>label-sr-only</code> is set.</p>\n<p>You can also apply additional classes to the label via the <code>label-class</code> prop, such as\nresponsive padding and text alignment utility classes. The <code>label-class</code> prop accepts either\na string or array of strings.</p>\n<h3 id="horizontal-layout">Horizontal layout</h3>\n<p>By default, the label appears above the input element(s), but you may optionally set\nthe prop <code>horizontal</code> to place the label on the same line, and control the width\nof the label by setting <code>label-cols</code> to the number of columns (default of <code>3</code>,\nvalid range of 1 through 11). <code>label-cols</code> has no effect if the layout is\nnot <code>horizontal</code>. For viewports below size <code>sm</code>, the label will revert to\nbeing displayed above the input control. You can control the breakpoint for this\nby setting the <code>breakpoint</code> prop (<code>&apos;sm&apos;</code>, <code>&apos;md&apos;</code>, <code>&apos;lg&apos;</code>, or <code>&apos;xl&apos;</code>. The default is <code>&apos;sm&apos;</code>).</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fieldsetHorizontal&quot;</span>\n                <span class="hljs-attr">horizontal</span>\n                <span class="hljs-attr">:label-cols</span>=<span class="hljs-string">&quot;4&quot;</span>\n                <span class="hljs-attr">breakpoint</span>=<span class="hljs-string">&quot;md&quot;</span>\n                <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;Let us know your name.&quot;</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Enter your name&quot;</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;inputHorizontal&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputHorizontal&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-group-horizontal.vue --&gt;</span>\n</pre>\n<h3 id="label-size">Label size</h3>\n<p>You can control the label text size match the size of your form input(s) via the\noptional <code>label-size</code> prop. Values can be <code>&apos;sm&apos;</code> or <code>&apos;lg&apos;</code> for small or large\nlabel, respectively. Sizes work for both <code>horizontal</code> and non-horizontal form groups.</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                <span class="hljs-attr">:label-cols</span>=<span class="hljs-string">&quot;2&quot;</span>\n                <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;sm&quot;</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Small&quot;</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input_sm&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input_sm&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;sm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                <span class="hljs-attr">:label-cols</span>=<span class="hljs-string">&quot;2&quot;</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Default&quot;</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input_default&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input_default&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                <span class="hljs-attr">:label-cols</span>=<span class="hljs-string">&quot;2&quot;</span>\n                <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Large&quot;</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;input_lg&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input_lg&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-group-label-size.vue --&gt;</span>\n</pre>\n<h2 id="description">Description</h2>\n<p>Optional descriptive text which is always shown with the <code>.text-muted</code> class\n(html supported) by setting the <code>description</code> prop or using the named slot <code>description</code>.\nThe description text is rendered using the <a href="/docs/components/form#helper-components"><code>&lt;b-form-text&gt;</code></a>\nform sub-component.</p>\n<h2 id="nested-form-groups">Nested form groups</h2>\n<p>Feel free to nest <code>&lt;b-form-group&gt;</code> components to produce advanced form layouts and\nsemantic grouping of related form controls:</p>\n<pre class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">bg-variant</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                <span class="hljs-attr">breakpoint</span>=<span class="hljs-string">&quot;lg&quot;</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Shipping Address&quot;</span>\n                <span class="hljs-attr">label-size</span>=<span class="hljs-string">&quot;lg&quot;</span>\n                <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;font-weight-bold pt-0&quot;</span>\n                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Street:&quot;</span>\n                  <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>\n                  <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nestedStreet&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nestedStreet&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;City:&quot;</span>\n                  <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>\n                  <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nestedCity&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nestedCity&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;State:&quot;</span>\n                  <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>\n                  <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nestedState&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nestedState&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Country:&quot;</span>\n                  <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>\n                  <span class="hljs-attr">label-for</span>=<span class="hljs-string">&quot;nestedCountry&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nestedCountry&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">horizontal</span>\n                  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Ship via:&quot;</span>\n                  <span class="hljs-attr">label-class</span>=<span class="hljs-string">&quot;text-sm-right&quot;</span>\n                  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-0&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pt-2&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;[&apos;Air&apos;, &apos;Courier&apos;, &apos;Mail&apos;]&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-group-nested.vue --&gt;</span>\n</pre>\n<h2 id="validation-state-feedback">Validation state feedback</h2>\n<p>Bootstrap includes validation styles for <code>valid</code> and <code>invalid</code> states\non most form controls.</p>\n<p>Generally speaking, you&#x2019;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code>&apos;invalid&apos;</code> is great for when there&#x2019;s a blocking or required field. A user must fill in\nthis field properly to submit the form.</li>\n<li><code>&apos;valid&apos;</code> is ideal for situations when you have per-field validation throughout a form\nand want to encourage a user through the rest of the fields.</li>\n<li><code>null</code> Displays no validation state</li>\n</ul>\n<p>To apply one of the contextual states on <code>&lt;b-form-group&gt;</code>, set the <code>state</code> prop\nto <code>&apos;invalid&apos;</code> (or <code>false</code>), <code>&apos;valid&apos;</code> (or <code>true</code>), or <code>null</code>. This will programmatically show\nthe apropriate feedback text.</p>\n<p>Boostrap V4 uses sibling CSS slectors of <code>:invalid</code> or <code>:valid</code> inputs to show the feedback text. Some\nform controls (such as checkboxes, radios, and file inputs, or inputs inside input-groups) are\nwrapped in additional markup that will no longer make the feedback text a sibling of the input, and\nhence the feedback will not show.  In these situations you will need to set the validity <code>state</code> on\nthe <code>&lt;b-form-group&gt;</code> <em>as well as</em> the input.</p>\n<p>Feedback will be shown if the parent <code>&lt;b-form&gt;</code> component does <em>not</em> have the\n<code>novalidate</code> prop set (or set to <code>false</code>) along with the <code>vadidated</code> prop set (and the input\nfails or passes native browser validation constraints such as <code>required</code>). Refer to Bootstrap V4&apos;s\n<a href="http://getbootstrap.com/docs/4.0/components/forms/#validation">Form component</a> documentation\nfor details on validation methods.</p>\n<p>You should always provide content via the <code>invalid-feedback</code> prop (or slot) to aid users\nusing assistive technologies when setting a contextual <code>invalid</code> state.</p>\n<h3 id="invalid-feedback">Invalid feedback</h3>\n<p>Show optional invalid state feedback text to provide textual state feedback (html supported)\nby setting the prop <code>invalid-feedback</code> or using the named slot <code>invalid-feedback</code>.</p>\n<p>Invalid feedback is rendered using the <a href="/docs/components/form#helper-components"><code>&lt;b-form-invalid-feedback&gt;</code></a>\nform sub-componment.</p>\n<p><strong>Note:</strong> The prop <code>feedback</code> has been deprecated in favor of the <code>invalid-feedback</code> prop.</p>\n<h3 id="valid-feedback">Valid feedback</h3>\n<p>Show optional valid state feedback text to provide textual state feedback (html supported)\nby setting the prop <code>valid-feedback</code> or using the named slot <code>valid-feedback</code>.</p>\n<p>Valid feedback is rendered using the <a href="/docs/components/form#helper-components"><code>&lt;b-form-valid-feedback&gt;</code></a>\nform sub-componment.</p>\n<h3 id="feedback-limitations">Feedback limitations</h3>\n<p><strong>Note:</strong> When using <code>&lt;b-input-group&gt;</code>, <code>&lt;b-form-file&gt;</code>, <code>&lt;b-form-radio-group&gt;</code>,\n<code>&lt;b-form-radio&gt;</code>, <code>&lt;b-form-checkbox-group&gt;</code> or <code>&lt;b-form-checkbox&gt;</code> inside a\n<code>&lt;b-form-group&gt;</code>, setting an invalid (or valid) <code>state</code> on the <code>input</code> alone will <strong>not</strong> trigger\nthe invalid (or valid) feedback to show (due to limitations with the new Bootsrap V4 validation CSS).\nTo get around this, <strong>you must also</strong> set the invalid/valid <code>state</code> on <code>&lt;b-form-group&gt;</code>.  Native\nbrowser validation will <strong>not</strong> trigger the invalid feedback to show when using one of\nthe above mentiond form controls.</p>\n<h2 id="accessibility">Accessibility</h2>\n<p>To enable auto-generation of <code>aria-*</code> attributes, you should supply a unique <code>id</code> prop\nto <code>&lt;b-form-group&gt;</code>. This will associate the help text and feedback text to\nthe <code>&lt;b-form-group&gt;</code> and, indirectly to its input control(s).</p>\n<p>By default, when no <code>label-for</code> value is provided, <code>&lt;b-form-group&gt;</code> renders the input control(s)\ninside a an HTML <code>&lt;fieldset&gt;</code> element with the label content placed inside the fieldset&apos;s\n<code>&lt;legend&gt;</code> element. By nature of this markup, the legend content is automatically associated to\nthe containing input control(s).</p>\n<p>It is <strong>highly recommended</strong> that you provide a unique <code>id</code> prop on your input element and set\nthe <code>label-for</code> prop to this id, when you have only a single input in the <code>&lt;b-form-group&gt;</code>.</p>\n<p>When multiple form controls are placed inside <code>&lt;b-form-group&gt;</code> (i.e. a series or radio or\ncheckbox inputs, or a series of related inputs), <strong>do not set</strong> the <code>label-for</code> prop, as a\nlabel can only be associated with a single input. It is best to use the default rendered\nmarkup that produces a <code>&lt;fieldset&gt;</code> + <code>&lt;legend&gt;</code> which will describe the group of inputs.</p>\n<p>When placing multiple form controls inside a <code>&lt;b-form-group&gt;</code> (and you are not nesting\n<code>&lt;b-form-group&gt;</code>components), it is recommended to give each control its own associated\n<code>&lt;label&gt;</code> (which may be visually hidden using the <code>.sr-only</code> class) and set the labels\n<code>for</code> attribute to the <code>id</code> of the associated input control. Alternatively, you can set the\n<code>aria-label</code> attribute on each input control instead of using a <code>&lt;label&gt;</code>. For <code>&lt;b-form-radio&gt;</code>\nand <code>&lt;b-form-checkbox&gt;</code> (or the group versions), you do not need to set individual labels, as\nthe rendered markup for these types of inputs already includes a <code>&lt;label&gt;</code> element.</p>\n<h2 id="component-alias">Component alias</h2>\n<p><code>&lt;b-form-group&gt;</code> can also be used via the alias of <code>&lt;b-form-fieldset&gt;</code>.</p>\n<h2 id="component-reference">Component Reference</h2>\n'}}]);